--- src/TerrariaNetCore/Terraria/Program.cs
+++ src/tModLoader/Terraria/Program.cs
@@ -2,8 +_,11 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
+using System.IO.Pipes;
+using System.Linq;
 using System.Reflection;
 using System.Runtime.CompilerServices;
+using System.Runtime.Loader;
 using System.Text;
 using System.Threading;
 using System.Windows.Forms;
@@ -11,12 +_,17 @@
 using ReLogic.OS;
 using Terraria.Initializers;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader.Exceptions;
 using Terraria.Social;
 using Terraria.Utilities;
+using static Terraria.MonoLaunch;
 
 namespace Terraria;
 
-public static class Program
+public static partial class Program
 {
 #if XNA
 	public static bool IsXna = true;
@@ -35,6 +_,38 @@
 	public static bool LoadedEverything;
 	public static IntPtr JitForcedMethodCache;
 
+	// Added by TML.
+	public static Thread MainThread { get; private set; }
+	public static bool IsMainThread => Thread.CurrentThread == MainThread;
+
+	internal class ChildLoadContext : AssemblyLoadContext
+	{
+		public ChildLoadContext() : base(isCollectible: true) { }
+
+		protected override Assembly Load(AssemblyName assemblyName) {
+			return Default.LoadFromAssemblyName(assemblyName);
+		}
+
+		protected override IntPtr LoadUnmanagedDll(string unmanagedDllName) {
+			Console.WriteLine("Loading unmanaged DLL: " + unmanagedDllName);
+			return base.LoadUnmanagedDll(unmanagedDllName);
+		}
+	}
+
+	internal const string RestartChildALCMessage = "restart-child";
+
+	internal static ChildLoadContext ChildTMLContext {
+		get;
+		private set;
+	}
+
+	public static AnonymousPipeClientStream ChildALCPipe {
+		get;
+		private set;
+	}
+
+	private static AnonymousPipeServerStream parentALCPipe;
+
 	public static float LoadedPercentage {
 		get {
 			if (ThingsToLoad == 0)
@@ -62,6 +_,7 @@
 		LoadedEverything = true;
 	}
 
+	/*
 	private static void ForceJITOnAssembly(Assembly assembly)
 	{
 		Type[] types = assembly.GetTypes();
@@ -79,6 +_,20 @@
 			ThingsLoaded++;
 		}
 	}
+	*/
+	private static void ForceJITOnAssembly(IEnumerable<Type> types)
+	{
+		var methodsToJIT = CollectMethodsToJIT(types);
+
+		if (Environment.ProcessorCount > 1) {
+			methodsToJIT.AsParallel().AsUnordered().ForAll(ForceJITOnMethod);
+		}
+		else {
+			foreach (var method in methodsToJIT) {
+				ForceJITOnMethod(method);
+			}
+		}
+	}
 
 	private static void ForceStaticInitializers(Assembly assembly)
 	{
@@ -91,8 +_,14 @@
 
 	private static void ForceLoadAssembly(Assembly assembly, bool initializeStaticMembers)
 	{
+ 		/*
 		ThingsToLoad = assembly.GetTypes().Length;
 		ForceJITOnAssembly(assembly);
+ 		*/
+		var types = assembly.GetTypes();
+		ThingsToLoad = types.Select(type => GetAllMethods(type).Count()).Sum();
+		ForceJITOnAssembly(types);
+
 		if (initializeStaticMembers)
 			ForceStaticInitializers(assembly);
 	}
@@ -136,6 +_,10 @@
 		if (Debugger.IsAttached)
 			return;
 
+		// Hide the console on clients unless a special parameter was passed down.
+		if (!Main.dedServ && !LaunchParameters.ContainsKey("-console"))
+			Platform.Get<IWindowService>().HideConsole();
+
 		try {
 			Console.OutputEncoding = Encoding.UTF8;
 			if (Platform.IsWindows)
@@ -147,9 +_,55 @@
 		}
 	}
 
+	//IMPORTANT: We really want arg parsing, logging, and monomod initialized before static Main()
+	// Moving all calls to Main to LaunchGame_() mitigates this risk
+	public static void BeginLaunchGame(string[] args, bool monoArgs = false)
+	{
+		// It's not the Entry Thread anymore, but it still is the base thread of FNA and Main
+		MainThread = Thread.CurrentThread;
+		MainThread.Name = "Main Thread";
+
+		CreateNewChildALC(args, monoArgs);
+
+		// Parent ALC will just sit around and wait until its pipe receives data
+		StreamReader reader = new StreamReader(parentALCPipe);
+		while (true) {
+			string pipeData = reader.ReadLine()?.Trim() ?? "";
+
+			if (pipeData == RestartChildALCMessage) {
+				ChildTMLContext.Unload();
+
+				GC.Collect();
+				GC.WaitForPendingFinalizers();
+				GC.Collect();
+
+				reader.Dispose();
+				parentALCPipe.Dispose();
+
+				Console.Clear();
+				CreateNewChildALC(args, monoArgs);
+				reader = new StreamReader(parentALCPipe);
+			}
+		}
+	}
+
+	private static void CreateNewChildALC(string[] args, bool monoArgs)
+	{
+		ChildTMLContext = new ChildLoadContext();
+		parentALCPipe = new AnonymousPipeServerStream(PipeDirection.In, HandleInheritability.Inheritable);
+
+		Assembly childTMLAssembly = ChildTMLContext.LoadFromAssemblyPath(typeof(MonoLaunch).Assembly.Location);
+
+		Type childProgram = childTMLAssembly.GetType(typeof(Program).FullName ?? "")!;
+		childProgram.GetProperty(nameof(ChildALCPipe), BindingFlags.Public | BindingFlags.Static)!.SetMethod!.Invoke(null, new object?[] { new AnonymousPipeClientStream(PipeDirection.Out, parentALCPipe.GetClientHandleAsString()) });
+		childProgram.GetMethod(nameof(LaunchGame), BindingFlags.Public | BindingFlags.Static)!.Invoke(null, new object?[] { args, monoArgs });
+	}
+
+	//IMPORTANT: We really want arg parsing, logging, and monomod initialized before static Main()
+	// Moving all calls to Main to LaunchGame_() mitigates this risk
 	public static void LaunchGame(string[] args, bool monoArgs = false)
 	{
-		Thread.CurrentThread.Name = "Main Thread";
+		/*
 		if (monoArgs)
 			args = Utils.ConvertMonoArgsToDotNet(args);
 
@@ -164,6 +_,28 @@
 		// Unify server and client dll via launch param
 		Main.dedServ = LaunchParameters.ContainsKey("-server");
 #endif
+		*/
+
+		ProcessLaunchArgs(args, monoArgs, out bool isServer);
+
+		StartupSequenceTml(isServer);
+		
+		LaunchGame_(isServer);
+	}
+
+	// IMPORTANT: We really want arg parsing, logging, and monomod initialized before static Main()
+	// Moving all calls to Main to LaunchGame_() mitigates this risk
+	public static void LaunchGame_(bool isServer)
+	{
+		Main.dedServ = isServer;
+		if (isServer)
+			Main.myPlayer = 255;
+
+		//TODO: Can this be moved to LaunchInitializer.LoadServerParameters?
+		if (LaunchInitializer.TryParameter("-build") is string build)
+			// Inside the build from command line, the application exits
+			// Anything beyond this point will not be executed
+			ModCompile.BuildModCommandLine(build);
 
 		if (Main.dedServ) { // Remove bad environment variables that might be set by other app installs
 			Environment.SetEnvironmentVariable("FNA_PLATFORM_BACKEND", "NONE");
@@ -171,7 +_,9 @@
 
 		ThreadPool.SetMinThreads(8, 8);
 		InitializeConsoleOutput();
+		/*
 		SetupLogging();
+		*/
 		Platform.Get<IWindowService>().SetQuickEditEnabled(enabled: false);
 		RunGame();
 	}
@@ -184,9 +_,14 @@
 				Main.instance.IsMouseVisible = false;
 			};
 		}
+		
+		InstallVerifier.Startup();
 
-		using Main main = new Main();
 		try {
+			ModLoader.ModLoader.EngineInit();
+
+			using Main main = new Main();
+
 			Lang.InitializeLegacyLocalization();
 			SocialAPI.Initialize();
 			LaunchInitializer.LoadParameters(main);
@@ -197,10 +_,14 @@
 				main.Run();
 		}
 		catch (Exception e) {
+			ErrorReporting.FatalExit("Main engine crash", e);
+			/*
 			DisplayException(e);
+			*/
 		}
 	}
 
+	/*
 	private static void TrySettingFNAToOpenGL(string[] args)
 	{
 		bool flag = false;
@@ -241,4 +_,5 @@
 		catch {
 		}
 	}
+	*/
 }
