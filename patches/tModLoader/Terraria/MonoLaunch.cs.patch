--- src/TerrariaNetCore/Terraria/MonoLaunch.cs
+++ src/tModLoader/Terraria/MonoLaunch.cs
@@ -6,7 +_,11 @@
 using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Loader;
+using System.Threading;
 using Terraria;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
 
 namespace Terraria;
 
@@ -14,11 +_,19 @@
 {
 	private static readonly Dictionary<string, IntPtr> assemblies = new Dictionary<string, IntPtr>();
 
+
+	// Main will only ever be run on the first ALC (on first launch), and the child ALC will get started with the BeginEntrySequence method (see below)
 	private static void Main(string[] args)
 	{
-#if NETCORE
-		AssemblyLoadContext.Default.ResolvingUnmanagedDll += ResolveNativeLibrary;
-#else
+		// Launch tModPorter instead if it needed.
+		if (Array.IndexOf(args, "-tModPorter") is int i && i >= 0) {
+			tModPorter.Program.Main(args.Skip(i + 1).ToArray()).GetAwaiter().GetResult();
+			return;
+		}
+
+		#if NETCORE
+		NativeLibraries.SetNativeLibraryPath(NativesDir);
+		#else
 		AppDomain.CurrentDomain.AssemblyResolve += delegate (object sender, ResolveEventArgs sargs) {
 			string resourceName = new AssemblyName(sargs.Name).Name + ".dll";
 			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(resourceName));
@@ -31,9 +_,55 @@
 				return Assembly.Load(array);
 			}
 		};
-#endif
+		#endif
+
+		if (!CoreModLoader.FindCoremods(args, out Mod[] coreMods)) {
+			#if NETCORE
+			AssemblyLoadContext.Default.ResolvingUnmanagedDll += ResolveNativeLibrary;
+			#endif
+
+			// If no coremods are found, just launch tML normally.
+			BeginEntrySequence(args);
+			return;
+		}
+
+		CoreModLoader.LaunchALCWithCoremods(args, coreMods);
+	}
+
+	internal static void BeginEntrySequence(string[] args)
+	{
+		Thread.CurrentThread.Name = "Entry Thread";
 
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
+
+		if (File.Exists("cli-argsConfig.txt"))
+			args = args.Concat(File.ReadAllLines("cli-argsConfig.txt").SelectMany(a => a.Split(" ", 2))).ToArray();
+
+		if (File.Exists("env-argsConfig.txt"))
+			foreach (var environmentVar in File.ReadAllLines("env-argsConfig.txt").Select(text => text.Split("=")).Where(envVar => envVar.Length == 2))
+				Environment.SetEnvironmentVariable(environmentVar[0], environmentVar[1]);
+
+		// Spawn a thread to use configured default stack size instead of the one reported in the binary
+		// https://social.msdn.microsoft.com/Forums/office/en-US/7132b30d-9792-4bf3-87ec-7198052e4ed3/main-thread-stack-size?forum=csharpgeneral
+		// post processing the binary with `editbin /stack:400000 tModLoader.dll` should do it for the main thread but it's annoying
+		// and duplicates the size defined in the runtimeconfig
+		// @TODO: Temporary change, make it cross platform, linux crashes if FNA loop is not in the REAL Main thread
+		//        Atm linux and mac use for main also the env variable so it works
+
+		var LocalLaunchGame = () => Main_End(args);
+
+		if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
+			new Thread(new ThreadStart(LocalLaunchGame)).Start();
+			// Move the dummy entry thread to background
+			Thread.CurrentThread.IsBackground = true;
+		} else {
+			LocalLaunchGame();
+		}
+	}
+
+	// A split to avoid adding indentation.
+	private static void Main_End(string[] args)
+	{
 		Program.LaunchGame(args, monoArgs: true);
 	}
 
@@ -50,24 +_,24 @@
 
 	// Note: AssemblyLoadContext.Default.ResolvingUnmanagedDll is only called if the dll is not found on PATH
 	// In a production environment, you need to prepend to PATH prioritise your shipped libraries, making this logging mostly useless.
-	private static IntPtr ResolveNativeLibrary(Assembly assembly, string name)
+	internal static IntPtr ResolveNativeLibrary(Assembly assembly, string name)
 	{
 		// This method shouldn't be throwing exceptions, in case we're in a TryLoad scenario.
 		lock (resolverLock) {
 			if (assemblies.TryGetValue(name, out var handle))
 				return handle;
 
-			Console.WriteLine($"Native Resolve: {assembly.FullName} -> {name}");
+			Logging.tML.Debug($"Native Resolve: {assembly.FullName} -> {name}");
 
 			var files = Directory.GetFiles(NativesDir, $"*{name}*", SearchOption.AllDirectories);
 			if (files.FirstOrDefault() is not string path) {
-				Console.WriteLine("\tnot found");
+				Logging.tML.Debug("\tnot found");
 				return IntPtr.Zero;
 			}
 
-			Console.WriteLine($"\tattempting load {path}");
+			Logging.tML.Debug($"\tattempting load {path}");
 			handle = NativeLibrary.Load(path);
-			Console.WriteLine("\tsuccess");
+			Logging.tML.Debug("\tsuccess");
 			return assemblies[name] = handle;
 		}
 	}
